#!/usr/bin/perl
use strict;
use warnings;

use Socket;
use File::Basename;
use POSIX ":sys_wait_h";
use POSIX qw(mkfifo);

my %config = ();
my %exec = ();
my %route = ();
my $nbTotalClient = 0;
my @children = ();
my $nbTotalRequetesRecues = 0;
my $nbTotalRequetesTraitees = 0;

sub verifConfig {
    $config{"logfile"} and $config{"clients"} and $config {"port"} and $config{"error"} and $config{"index"} or die "Missing config parameter\n" ;
	keys(%route) and values(%route) or die "Missing config parameter";
	keys(%exec) and values(%exec) or die "Missing config parameter\n";
}

sub List {
    my $path = $_[0];
    for my $key(keys(%route)){
        if($path =~ $key){
            my $value= $route{$key};
            $path =~ s/$key/$value/;
            my $nb_param = @-;
            $nb_param = $nb_param--;
            for(my $count_param = 1; $count_param<$nb_param;$count_param++){
                my $id = eval('$'.$count_param);
                $path =~ s/\\$count_param/$id/;
            }
            if(-d $path || $path =~ / *.html/ || $path =~ / *.txt/ || $path =~ / *.png/){
                return $path;
            }else{
                error(415);
                
            }
            
        }
    }
    for my $key(keys(%exec)){
        if($path =~ $key){
            my $value = $exec{$key};
            $path =~ s/$key/$value/;
            my $nb_param = @-;
            $nb_param=$nb_param--;
            for(my $count_param= 1;$count_param<$nb_param;$count_param++){
                my $id = eval('$'.$count_param);
                $path =~ s/\\$count_param/$id/;
            }
            return $path."\n";
        }
    }
    return "error";
}
sub initConfig {
    open(CONFIG, "./comanche.conf") or die ("Error openning config file\n");
    my @param = ();
    while(<CONFIG>){
        chomp;
        if(/set\ */){
            @param = split /\s+/, $_;
            $config{$param[1]} = $param[2];
        }
		if(/route\ */){	
			@param = split /\s+/,$_;
			$route{$param[1]} = $param[3];
		}	
        if(/exec\ */){
            @param = split /\s+/, $_;
            $exec{$param[1]} = $param[3];
        }
    }
    verifConfig();
    close(CONFIG);
}

sub verifFichier {
    my $path = $_[0];
    my $newPath = List($path);
    chomp $newPath;
    if($newPath ne "error"){
        if(-e $newPath){
            if( -d $newPath){
                dirToHtml($newPath,$path);
            }else{
                if( -r $newPath){
                    if($_[0] =~ / *.html/ || $_[0] =~ / *.txt/ || $_[0] =~ / *.png/){
                        if($_[0] =~ / *.html/ || $_[0] =~ / *.txt/){
                            resFile($newPath,"text/html");                       
                        }else{
                            resFile($newPath,"image/png");                       
                        }   
                    }else{
                        #resFile($newExec);
                    }
                }else{
                    error(403);
                }                
            }
        }
        else{
            error(404);            
        }
    }else{
        error(404);        
    }
}

sub parseRequest {
    my @param = ();
    my $path = "";
    my $blankLine=0;
    while(<CLIENT>){
        if($. == 1){
            @param = split / /, $_;
            $param[0] and $param[1] and $param[2] and not $param[3] or error(400);
            $param[0] eq "GET" or error(405);
            $path = $param[1];
            $param[2] eq "HTTP/1.1\r\n" or error(505); 
        }elsif($_ eq "\r\n"){
            $blankLine =1;
            last;
        }elsif($_ =~ /Host: .*\r\n/){
            print $_;
        }
    }
    $blankLine or error(400);
    return $path;
}

sub error {
    my $phrase = "";
    my $code = $_[0];
    if($code == 400){
        $phrase = "Bad Request";
    }elsif ($code == 403) {
        $phrase = "Forbidden";
    }elsif ($code == 404) {
        $phrase = "Not Found";
    }elsif ($code == 405) {
        $phrase = "Method Not Allowed";
    }elsif ($code == 415) {
        $phrase = "Unsupported Media Type";
    }elsif ($code == 503) {
        $phrase = "Service Unavailable";
    }elsif ($code == 505) {
        $phrase = "HTTP Version Not Supported";
    }
    $|=1;
    my $size = -s $config{"error"};
    print CLIENT "HTTP/1.1 $code $phrase\r\n";
    print CLIENT "Content-Length: $size\r\n";
    print CLIENT "\r\n";
    open(ERROR, $config{"error"});
    while(<ERROR>){
        print CLIENT;
    }
    close(ERROR);
    if($_[0]){
        exit(0);
    }
}

sub responseOk {
    print CLIENT "HTTP/1.1 200 OK\r\n";
    print CLIENT "Content-Length: " . $_[1] . "\r\n";
    print CLIENT "Content-Type: " . $_[0] . "\r\n";
    print CLIENT "\r\n";
}

sub resFile {
    my $file = $_[0];
    my $size = -s $file;
    open(FILE, $file);
    responseOk($_[1], $size);
    while(<FILE>){
        print CLIENT;
    }
    close(FILE);
}

sub dirToHtml {
    my $res = "";
    my @files = glob($_[0] . "/*");
    my $index = 1;
    foreach my $file (@files) {
        my $toMatch = $_[0] . "/" .$config{"index"};
        if($file eq $toMatch){
            $index =0;
            resFile($toMatch, "text/html");
        }
    }
    if($index){
        $res = "<html><body><ul>";
        foreach my $file (@files) {
            $res = $res . '<li><a href="' . $_[1] . "/" . basename($file) . '">' . basename($file) . "</a></li>";
        }
        $res = $res . "</ul></body></html>";
        my $size = length($res);
        responseOk("text/html", $size);
        print CLIENT $res;
    }
}

$SIG{"CHLD"} = sub { 
                        while( ( my $child = waitpid( -1, &WNOHANG ) ) > 0 ) {
                            $nbTotalClient -= 1;
                            my $index = 0;
                            @children or die "Server stopped\n";
                            $index++ until $child and $children[$index] == $child and $children[$index];
                            splice(@children, $index, 1);
                        }
                   };

$SIG{"TERM"} = sub {
                        kill(9, @children) or exit 1;
                        exit 0;
                   };


if(! -e "com.pipe"){
    mkfifo("com.pipe", 0777) or die "Error while creating named pipe $!\n";
}

my $arg = $ARGV[0] if $ARGV[0] or die "Missing argument\n";

if($arg eq "start"){
    if((my $firstChild = fork()) == 0){

        $SIG{"USR1"} = sub {
                        autoflush STDOUT;
                        print STDOUT "$$\n";
                        print STDOUT "$nbTotalRequetesRecues $nbTotalRequetesTraitees\n";
                        my $actifs = scalar @children;
                        print STDOUT "Actifs : $actifs, liste : @children\n";
                   };

        $SIG{"USR2"} = sub {
                        $nbTotalRequetesTraitees +=1;
                   };

        initConfig();

        socket(SERVEUR, PF_INET, SOCK_STREAM, getprotobyname("tcp")) or die ("Cr√©ation impossible");
        setsockopt(SERVEUR, SOL_SOCKET, SO_REUSEADDR, 1);
        my $adresse_complete = sockaddr_in($config{"port"}, INADDR_ANY) or die("sockaddr");
        bind(SERVEUR, $adresse_complete) or die("bind $!");
        listen(SERVEUR, 10) or die("listen");

        my $pid=$$;
        while ($pid != 0){
            accept(CLIENT,SERVEUR) or next;
            if($nbTotalClient < $config{'clients'}) {
                $nbTotalClient += 1;
                $nbTotalRequetesRecues += 1;
                if(($pid = fork()) == 0){
                    my $path = parseRequest();
                    verifFichier($path);
                    close(CLIENT);
                    kill("USR2", getppid());

                    exit(0);
                }else {
                    push @children, $pid;
                    close(CLIENT);
                }

            }else {
                error(503, "no");
                close(CLIENT);
            }
        }
    }else {
        open(PIPE, "com.pipe") or die "Error opening pipe $!\n";
        while(1){
            while(<PIPE>){
                if($_ eq "stop"){
                    kill(3, $firstChild);
                    close(PIPE);
                    exit(0);
                }
                if($_ eq "status"){
                    kill("USR1", $firstChild);
                }
            }
        }
    }
} elsif ($arg eq "stop") {

    open(PIPE, ">>com.pipe");
    print PIPE "stop";
    close(PIPE);
    unlink("com.pipe");

} elsif ($arg eq "status"){

    open(PIPE, ">>com.pipe");
    print PIPE "status";
    close(PIPE);

}
